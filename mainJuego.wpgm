import nave.*
import alien.*
import musica.*
import imagen.*


program SpaceInvaders {
    // Configuración del tablero
    game.title("Space Invaders")
    game.width(10)
    game.height(10)
    game.cellSize(50)  // Tamaño de cada celda

    configurarNivel.iniciarPantallaInicial() //luego de cargar pantalla inicial inicia el juego

}

// Objeto para gestionar el nivel y la velocidad de los aliens
object nivel {
    var nivelActual = 0
    var property contadorJefes = 3 

    method nivelActual() = nivelActual

    // Incrementa el nivel del juego (hasta un máximo de 3)
    method subirNivel() {
        if (nivelActual < 3) {
            nivelActual += 1
            contadorJefes+=1
        }

        game.removeTickEvent("moverAliens")
        configurarNivel.inicializar()
    }

    method reiniciarNivel(){
        nivelActual = 0
    }

    // Retorna la velocidad de los aliens basada en el nivel actual
    method velocidadAliens() {
        return 4500 / nivelActual  // Aumenta la velocidad al subir de nivel
    }

    // Método para crear la formación de aliens
    method crearAliens() {
        const aliens = []
        const posiciones = [
            game.at(1, 9),game.at(2, 9), game.at(3, 9), game.at(4, 9), game.at(5, 9), game.at(6, 9),game.at(7, 9),game.at(8, 9),
            game.at(1, 8),game.at(2, 8), game.at(3, 8), game.at(4, 8), game.at(5, 8), game.at(6, 8),game.at(7, 8),game.at(8, 8),
            game.at(1, 7),game.at(2, 7), game.at(3, 7), game.at(4, 7), game.at(5, 7), game.at(6, 7),game.at(7, 7),game.at(8, 7)
        ]

        var contador = 0

        posiciones.forEach({ posicion =>
          
            if(contador < self.contadorJefes()-1 and aliens.size()>0){
                contador+=1
                const alienJefe = new AlienJefe(position=posicion, vida=200)
                alienJefe.initialize(posicion)  // Inicializar la posición del alien correctamente
                aliens.add(alienJefe)  // Agregar el alien a la lista de aliens
            }else{
                const alienNormal = new AlienNormal(position=posicion, vida=100)
                alienNormal.initialize(posicion)  // Inicializar la posición del alien correctamente
                aliens.add(alienNormal)  // Agregar el alien a la lista de aliens
            }
        })

        return aliens
    }

    // Método para crear una nueva oleada de aliens
    method nuevaOleada() {
        const nuevaOleada = self.crearAliens()  // Crear la nueva lista de aliens
        nuevaOleada.forEach({ alien => game.addVisual(alien) })  // Agregar los nuevos aliens al juego
        return nuevaOleada  // Retornar la nueva lista de aliens
    }
}

// Configuración de las teclas para mover la nave y disparar
object configurarTeclas {
    method configurar(aliens) {
        keyboard.right().onPressDo({ nave.moverADerecha() })
        keyboard.left().onPressDo({ nave.moverAIzquierda() })
        keyboard.enter().onPressDo({ nave.disparar(aliens) })  // Disparar usando la lista de aliens
    }
}

object configurarNivel {

    method iniciarPantallaInicial() {
        musica.reprocudirMusicaMenuPrincipal()
        if (nivel.nivelActual() == 0)
        {   
            const imagenInicial = new ImagenInicial()
            game.addVisual(imagenInicial)
            keyboard.enter().onPressDo({ if(nivel.nivelActual() == 0) {game.removeVisual(imagenInicial) musica.detenerMusicaMenuPrincipal() musica.reprocudirMusicaNiveles() nivel.subirNivel()} })
            game.start()
        }
    }

    method inicializar() 
    {   
        const imagenJuego = new ImagenJuego()
        
        game.addVisual(imagenJuego)
        game.addVisual(nave)

        var aliens = nivel.nuevaOleada()
        
        configurarTeclas.configurar(aliens)

        // Evento onTick para mover los aliens y verificar condiciones
        game.onTick(nivel.velocidadAliens(), "moverAliens", {
            if (aliens.size() > 0) {
                aliens.forEach({ alien =>
                    alien.moverAbajo()  // Mover el alien hacia abajo
                    // Verificar si el alien está vivo
                    if (!alien.estaVivo()) {
                        game.removeVisual(alien)  // Eliminar el alien si su vida es 0
                        aliens.remove(alien)  // Remover de la lista de aliens
                    }
                })

                // Verificar si algún alien ha llegado a la parte inferior del tablero
                if (aliens.any({ alien => alien.position().y() <= 0 })) {
                    const imagenPerder = new ImagenPerder()
                    game.removeVisual(nave)
                    game.addVisual(imagenPerder)
                    musica.detenerMusicaNiveles()
                    game.say(nave, "¡Felicidades! Has completado todos los niveles.")
                    keyboard.r().onPressDo({self.reiniciar()})
                    keyboard.enter().onPressDo({game.clear()})
                }
            }

            // Verificar si todos los aliens han sido eliminados
            if (aliens.size() == 0) {
                game.removeVisual(imagenJuego)

                if (nivel.nivelActual() < 3) {  // Si no hemos llegado al tercer nivel
                    game.schedule(2000, {
                        game.clear()
                        nivel.subirNivel()
                    })
                } else {  // Si hemos llegado al tercer nivel
                    const imagenFinal = new ImagenFinal()
                    game.removeVisual(nave)
                    game.addVisual(imagenFinal)
                    musica.detenerMusicaNiveles()
                    game.say(nave, "¡Felicidades! Has completado todos los niveles.")
                    keyboard.r().onPressDo({self.reiniciar()})
                    keyboard.enter().onPressDo({game.clear()})
                }
            }
        })
    }

    method reiniciar() {
        game.clear()
        nivel.reiniciarNivel()
        self.iniciarPantallaInicial()
    }
}